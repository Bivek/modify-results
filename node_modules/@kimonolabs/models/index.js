'use strict';

var mongoose = require('mongoose');
var config = require('./config/envs.js')[process.env.NODE_ENV || 'development'];
var debug = require('debug')('kim:models');
// mongoose.set('debug', true);

var Models = function(secret, db) {
  var apiModel = require('./models/api')(db);
  var apiVersionModel = require('./models/apiversion')(db);
  var billingPlanModel = require('./models/billingplan')(db);
  var callModel = require('./models/call')(db);
  var crawlUrlModel = require('./models/crawlurl')(db);
  var fileModel = require('./models/file')(db);
  var incomingMailModel = require('./models/incomingmail')(db);
  var inviteModel = require('./models/invite')(db);
  var kimonoAppModel = require('./models/kimonoapp')(db);
  var notificationModel = require('./models/notifications')(db);
  var paidPlanSignupModel = require('./models/paidplansignup')(db);
  var publicApiModel = require('./models/publicapi')(db);
  var rtCallModel = require('./models/rtcall')(db);
  var serverErrorModel = require('./models/servererror')(db);
  var supportTicketModel = require('./models/supportticket')(db);
  var userModel = require('./models/user')(db);
  var userMetricModel = require('./models/usermetric')(db);

  return {
    Api: require('./resources/apis')(db),
    legacy: {
      Api: apiModel,
      ApiVersion: apiVersionModel,
      BillingPlan: billingPlanModel,
      Call: callModel,
      CrawlUrl: crawlUrlModel,
      File: fileModel,
      IncomingMail: incomingMailModel,
      Invite: inviteModel,
      Kimonoapp: kimonoAppModel,
      Notification: notificationModel,
      PaidPlanSignup: paidPlanSignupModel,
      PublicApi: publicApiModel,
      RTCall: rtCallModel,
      ServerError: serverErrorModel,
      SupportTicket: supportTicketModel,
      User: userModel,
      UserMetric: userMetricModel
    }
  };
};

module.exports = function(secret) {
  // FIXME: Add permissions.
  if (!secret) { }

  var db = mongoose.createConnection(config.db, config.db_options);

  db.on('error', function(err) {
    debug('MongoDB error: %s', err);
  });

  db.on('close', function(param1, param2) {
    debug(param1, param2);
  });

  db.once('open', function () {
    debug('Database connection established!');

    db.db.collectionNames(function (error, names) {
      if (error) {
        debug('Error: '+ error);
      } else {
        debug(names);
      }
    });
  });

  return new Models(secret, db);
};