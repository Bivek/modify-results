'use strict';

var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var _ = require('lodash');

module.exports = function(db) {
  var ApiVersionSchema = new Schema({
    apiid: {type: String, default: ''},
    number: {type: Number, default: 0}, // mapped to apiversion property on the api object (i.e. data version -- only incremented when crawl/scrape was succesful for at least one url)
    date: {type: Date, default: Date.now},
    stats: {
      successful: {type: Number, default: 0},
      retried: {type: Number, default: 0},
      retriedUrls: {type: Array, default: []},
      failed: {type: Number, default: 0},
      failedUrls: {type: Array, default: []},
      rows: {type: Number, default: 0},
      duration: {type: Number, default: 0} // milliseconds elapsed
    }
  });

  ///////////
  // Methods
  ///////////

  ////////////////////
  // Lifecycle Events
  ////////////////////

  ApiVersionSchema.post('init', function (apiVersion) {
    _.each(['retriedUrls', 'failedUrls'], function(name) {
      var urls = apiVersion.stats[name];
      if(urls) {
        var uniq = _.uniq(urls);
        if(urls.length != uniq.length) {
          console.log('WARNING: duplicate urls detected in ' + name + ' for api ' + apiVersion.apiid + ':' + apiVersion.number);
          apiVersion.stats[name] = uniq;
        }
      }
    });
  });

  db.model('ApiVersion', ApiVersionSchema);
  return db.model('ApiVersion');
};